using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum STATE {
	IDLE,
	MOVING,
	LEFT_ROTATION,
	RIGHT_ROTATION,
	TOTAL_ROTATION,
	ROTATING,
	FIXING_POSITION,
	MANUAL_CONTROL,
	_ENUMSIZE
};

public class BasicMovement : MonoBehaviour
{
	public bool updateState = true;
	public float movSpeed = 0.1f;
	public float rotSpeed = 1.0f;
	public float acceleration = 0.1f;

	public GameObject centerCollider;
	public GameObject leftCollider;
	public GameObject rightCollider;

	private float fSpd = 0.0f;
	private float sSpd = 0.0f;
	private float rSpd = 0.0f;

	private int fDir = 0;
	private int sDir = 0;
	private int rDir = 0;

	private Vector3 targetPosition;
	private float targetRotation;
	private Vector3 lastChoice;
	private bool choosing = false;

	private STATE state;

	private float lerp( float origin, float target, float amount) {
		return origin + (target-origin)*amount;
	}

	public void setState( STATE state ) {
		this.state = state;
	}

	private void Start() {
		if ( updateState ) state = STATE.MOVING;
		targetRotation = transform.rotation.eulerAngles.y;
		lastChoice = transform.position;
	}

	// Update is called once per frame
	private void FixedUpdate() {

		fDir = 0;
		sDir = 0;
		rDir = 0;

		switch(state) {
			case STATE.IDLE: idle_state(); break;
			case STATE.MOVING: moving_state(); break;
			case STATE.LEFT_ROTATION: left_rotation_state(); break;
			case STATE.RIGHT_ROTATION: right_rotation_state(); break;
			case STATE.TOTAL_ROTATION: total_rotation_state(); break;
			case STATE.ROTATING: rotating_state(); break;
			case STATE.FIXING_POSITION: fixing_position(); break;
			case STATE.MANUAL_CONTROL: manual_control(); break;
		}

		move();
	}

	public void move(){
		fSpd = lerp(fSpd, fDir * movSpeed, acceleration);
		sSpd = lerp(sSpd, sDir * movSpeed, acceleration);
		rSpd = lerp(rSpd, rDir * rotSpeed, acceleration);

		transform.position += fSpd * transform.right + sSpd * -transform.forward;
		transform.eulerAngles = new Vector3(0.0f, transform.eulerAngles.y + rSpd, 0.0f);

	}

	private void idle_state() {
		bool cColl = centerCollider.GetComponent<WallSensor>().colliding;
		bool lColl = leftCollider.GetComponent<WallSensor>().colliding;
		bool rColl = rightCollider.GetComponent<WallSensor>().colliding;

		if ( updateState ) state = STATE.MOVING;
	}

	public void moving_state() {
		fDir = 1;
		transform.eulerAngles = new Vector3(0.0f, targetRotation, 0.0f);

		if (!choosing) {

			bool cColl = centerCollider.GetComponent<WallSensor>().colliding;
			bool lColl = leftCollider.GetComponent<WallSensor>().colliding;
			bool rColl = rightCollider.GetComponent<WallSensor>().colliding;

			int collValue = (lColl ? 1 : 0) * 1 + (cColl ? 1 : 0) * 2 + (rColl ? 1 : 0) * 4;

			targetPosition = new Vector3(Mathf.Round((transform.position.x + 5.0f) / 10) * 10, transform.position.y, Mathf.Round((transform.position.z + 5.0f) / 10) * 10);
			Vector3 auxDirs = targetPosition - new Vector3(transform.position.x + 5.0f, transform.position.y, transform.position.z + 5.0f);

			if (auxDirs.magnitude < 1.0f) {

				if (collValue != 5) {
					choosing = true; lastChoice = transform.position;
				}

				int choice;
				switch (collValue) {
					case 0:
						choice = UnityEngine.Random.Range(0, 3);
						if (choice == 0) if ( updateState ) state = STATE.LEFT_ROTATION;
						if (choice == 1) if ( updateState ) state = STATE.MOVING;
						if (choice == 2) if ( updateState ) state = STATE.RIGHT_ROTATION;
						break;
					case 1:
						choice = UnityEngine.Random.Range(0, 2);
						if (choice == 0) if ( updateState ) state = STATE.MOVING;
						if (choice == 1) if ( updateState ) state = STATE.RIGHT_ROTATION;
						break;
					case 2:
						choice = UnityEngine.Random.Range(0, 2);
						if (choice == 0) if ( updateState ) state = STATE.LEFT_ROTATION;
						if (choice == 1) if ( updateState ) state = STATE.RIGHT_ROTATION;
						break;
					case 3: if ( updateState ) state = STATE.RIGHT_ROTATION; break;
					case 4:
							choice = UnityEngine.Random.Range(0, 2);
							if (choice == 0) if ( updateState ) state = STATE.LEFT_ROTATION;
							if (choice == 1) if ( updateState ) state = STATE.MOVING;
							break;
					case 5: if ( updateState ) state = STATE.MOVING; break;
					case 6: if ( updateState ) state = STATE.LEFT_ROTATION; break;
					case 7: if ( updateState ) state = STATE.TOTAL_ROTATION; break;
				}
			}
		} else {
			if ( ( transform.position - lastChoice ).magnitude > 9 ) {
				choosing = false;
			}
		}
	}

	public void left_rotation_state() { 
		targetRotation = transform.rotation.eulerAngles.y - 90;
		state = STATE.ROTATING;    
	}

	public void right_rotation_state() {
		targetRotation = transform.rotation.eulerAngles.y + 90;
		state = STATE.ROTATING;
	}
	public void total_rotation_state() {
		targetRotation = transform.rotation.eulerAngles.y + 180;
		state = STATE.ROTATING;
	}

	public void rotating_state() {

		float aDiff = Mathf.DeltaAngle(transform.rotation.eulerAngles.y, targetRotation);

		if ( Mathf.Abs(aDiff) > 4 ) {
			rDir = (int)Mathf.Sign(aDiff);
		} else {
			transform.eulerAngles = new Vector3(0.0f, lerp(transform.eulerAngles.y, transform.eulerAngles.y + aDiff, acceleration), 0.0f);
			if ( updateState ) state = STATE.FIXING_POSITION;
		}
	}

	public void fixing_position() {
		targetPosition = new Vector3(Mathf.Round( ( transform.position.x + 5.0f ) / 10) * 10, transform.position.y, Mathf.Round( ( transform.position.z + 5.0f) / 10) * 10);
		Vector3 auxDirs = targetPosition - new Vector3(transform.position.x + 5.0f, transform.position.y, transform.position.z + 5.0f);

		fDir = Math.Sign( auxDirs.z * transform.right.z + auxDirs.x * transform.right.x);
		sDir = Math.Sign( auxDirs.z * -transform.forward.z + auxDirs.x * -transform.forward.x);

		if ( auxDirs.magnitude < 2 * movSpeed ) {
			if ( updateState ) state = STATE.MOVING;
		}
	}

	private void manual_control() {
		fDir = ( ( Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow) ) ? 1 : 0 ) - ( ( Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow) ) ? 1 : 0 );
		sDir = ((Input.GetKey(KeyCode.D)) ? 1 : 0) - ((Input.GetKey(KeyCode.A)) ? 1 : 0);
		rDir = ( ( Input.GetKey(KeyCode.E) || Input.GetKey(KeyCode.RightArrow) ) ? 1 : 0 ) - ( ( Input.GetKey(KeyCode.Q) || Input.GetKey(KeyCode.LeftArrow) ) ? 1 : 0 );

		if ( Input.GetKey(KeyCode.Space) ) {
			if ( updateState ) state = STATE.FIXING_POSITION;
		}

	}
}
